// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var $, capitalize, draw_text, draw_text_elem, form_mailto, measure_text, parse_decoration, parse_shadow, text_transform,
    __slice = [].slice;

  $ = jQuery;

  capitalize = function(str) {
    return str.toLowerCase().replace(/(?:^|\W)\w/g, function(first) {
      return first.toUpperCase();
    });
  };

  text_transform = {
    none: function(str) {
      return str;
    },
    capitalize: capitalize,
    uppercase: function(str) {
      return str.toUpperCase();
    },
    lowercase: function(str) {
      return str.toLowerCase();
    }
  };

  parse_decoration = function(decoration) {
    var type, _ref;
    _ref = decoration.split(' '), type = _ref[0];
    switch (type) {
      case 'overline':
        return function(font_size) {
          return {
            height: 0,
            thickness: font_size / 12
          };
        };
      case 'line-through':
        return function(font_size) {
          return {
            height: font_size / 2,
            thickness: font_size / 20
          };
        };
      case 'underline':
        return function(font_size) {
          return {
            height: font_size,
            thickness: font_size / 12
          };
        };
      case 'none':
        return function() {
          return {
            height: 0,
            thickness: 0
          };
        };
    }
  };

  parse_shadow = function(shadow) {
    var blur, color, h_shadow, v_shadow, _i, _ref;
    if (shadow === 'none') {
      return null;
    } else {
      _ref = shadow.split(' '), color = 4 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 3) : (_i = 0, []), h_shadow = _ref[_i++], v_shadow = _ref[_i++], blur = _ref[_i++];
      return {
        blur: parseInt(blur, 10),
        v_shadow: parseInt(v_shadow, 10),
        h_shadow: parseInt(h_shadow, 10),
        color: color.join(' ')
      };
    }
  };

  measure_text = function(text, font) {
    var height, txt, width;
    txt = $('<span></span>');
    txt.text(text);
    txt.css('font', font);
    $(document.documentElement).append(txt);
    height = txt.height();
    width = txt.width();
    txt.remove();
    return {
      height: height,
      width: width
    };
  };

  draw_text = function(canvas, text, font, font_size, color, decoration, transform, shadow) {
    var ctx, dec, size;
    text = text_transform[transform](text);
    shadow = parse_shadow(shadow);
    size = measure_text(text, font);
    canvas.attr(size);
    ctx = canvas[0].getContext('2d');
    ctx.save();
    ctx.fillStyle = color;
    ctx.font = font;
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    if (shadow) {
      ctx.shadowBlur = shadow.blur;
      ctx.shadowOffsetY = shadow.v_shadow;
      ctx.shadowOffsetX = shadow.h_shadow;
      ctx.shadowColor = shadow.color;
    }
    ctx.fillText(text, 0, 0);
    ctx.restore();
    dec = (parse_decoration(decoration))(font_size);
    if (dec.thickness !== 0) {
      ctx.beginPath();
      ctx.strokeStyle = color;
      ctx.lineWidth = dec.thickness;
      ctx.moveTo(0, dec.height);
      ctx.lineTo(size.width, dec.height);
      ctx.stroke();
      ctx.restore();
    }
    return canvas;
  };

  draw_text_elem = function(element, canvas, user, domain) {
    return draw_text(canvas, user + '@' + domain, element.css('font'), parseInt(element.css('font-size'), 10), element.css('color'), element.css('text-decoration'), element.css('text-transform'), element.css('text-shadow'));
  };

  form_mailto = function(user, domain, options) {
    var all_params, bcc, body, cc, i, main, params, subject, u, _ref, _ref1;
    main = "mailto:" + user + "@" + domain;
    cc = ((function() {
      var _i, _len, _ref, _results;
      _ref = options.cc_users;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        u = _ref[i];
        _results.push(u + '@' + options.cc_domains[i]);
      }
      return _results;
    })()).join(',');
    bcc = ((function() {
      var _i, _len, _ref, _results;
      _ref = options.bcc_users;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        u = _ref[i];
        _results.push(u + '@' + options.bcc_domains[i]);
      }
      return _results;
    })()).join(',');
    subject = encodeURI((_ref = options.subject) != null ? _ref : '');
    body = encodeURI((_ref1 = options.body) != null ? _ref1 : '');
    params = [];
    if (cc) {
      params.push('cc=' + cc);
    }
    if (bcc) {
      params.push('bcc=' + bcc);
    }
    if (subject) {
      params.push('subject=' + subject);
    }
    if (body) {
      params.push('body=' + body);
    }
    all_params = params.join('&');
    if (all_params) {
      main = main + '?' + all_params;
    }
    return main;
  };

  $.fn.canvas_mail = function(user, domain, options) {
    if (options == null) {
      options = {};
    }
    if (options.cc_users == null) {
      options.cc_users = [];
    }
    if (options.cc_domains == null) {
      options.cc_domains = [];
    }
    if (options.bcc_users == null) {
      options.bcc_users = [];
    }
    if (options.bcc_domains == null) {
      options.bcc_domains = [];
    }
    return this.each(function() {
      var $$, canvas;
      $$ = $(this);
      canvas = $('<canvas></canvas>');
      canvas.css('vertical-align', 'text-top');
      draw_text_elem($$, canvas, user, domain);
      $$.empty();
      $$.append(canvas);
      if (($$.prop('tagName')) === 'A') {
        $$.mouseover(function() {
          $(this).attr('href', form_mailto(user, domain, options));
          return draw_text_elem($$, canvas, user, domain);
        });
        return $$.mouseout(function() {
          $(this).attr('href', null);
          return draw_text_elem($$, canvas, user, domain);
        });
      }
    });
  };

  $.fn.link_mail = function(user, domain, options) {
    if (options == null) {
      options = {};
    }
    if (options.cc_users == null) {
      options.cc_users = [];
    }
    if (options.cc_domains == null) {
      options.cc_domains = [];
    }
    if (options.bcc_users == null) {
      options.bcc_users = [];
    }
    if (options.bcc_domains == null) {
      options.bcc_domains = [];
    }
    return this.each(function() {
      var $$;
      $$ = $(this);
      if (($$.prop('tagName')) === 'A') {
        $$.mouseover(function() {
          return $(this).attr('href', form_mailto(user, domain, options));
        });
        return $$.mouseout(function() {
          return $(this).attr('href', null);
        });
      }
    });
  };

}).call(this);
